---
import { ViewTransitions } from "astro:transitions";
import GoogleAnalytics from "../components/GoogleAnalytics.astro";
import Header from "../components/HeaderAlternate.astro";
import Navigation from "../components/Navigation.astro";
import ThemeToggle from "../components/ThemeToggle.astro";
import { generateCircles } from "../lib/circles";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  className?: string;
}

const decorativeCircles = generateCircles(10, -10, 40, 60, 40);

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  image = "/static/blog-placeholder.png",
} = Astro.props;
---

<html lang="en">
  <head>
    <!-- Theme script - FIRST to prevent flash -->
    <script is:inline>
      // Prevent flash of wrong theme - default to dark
      (function () {
        const theme = localStorage.getItem("theme") || "dark";
        document.documentElement.classList.add(theme);
      })();
    </script>

    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Font preloads -->
    <link
      rel="preload"
      href="/fonts/Milligram-Bold-trial.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    <GoogleAnalytics />
    <ViewTransitions />
  </head>
  <body
    class="relative overflow-hidden font-sans text-[#2D3047] antialiased transition-colors dark:bg-zinc-900 dark:text-zinc-200"
  >
    <!-- 1. Black frame - bottommost layer -->
    <div id="bgback" class="fixed inset-0 z-[0] bg-[#2D3047] dark:bg-zinc-100">
    </div>

    <!-- 2. White content background -->
    <div
      id="bgoverlay"
      class="fixed inset-[15px] z-[10] overflow-hidden overflow-y-auto rounded-3xl bg-zinc-100 dark:bg-[#2D3047]"
    >
      <!-- 3. Decorative circles - above white background but below black frame -->
      {
        decorativeCircles.map((circle, index) => (
          <div
            transition:name={`circle-${index}`}
            id={`circle-${index}`}
            class={`absolute hidden overflow-hidden rounded-full lg:block`}
            style={`
          width: ${circle.size};
          height: ${circle.size};
          top: ${circle.top};
          left: ${circle.left};
          background: ${circle.color};
          border: 2px solid #FFF;
          box-shadow: 0px 6px 10px 2px rgba(0, 0, 0, 0.25);
        `}
          />
        ))
      }
      <!-- Custom home page layout -->
      <div class="z-50 flex min-h-[97vh] flex-col px-10 xl:px-24">
        <!-- Header positioned lower -->
        <div class="flex flex-1 flex-col justify-center">
          <div class="md:mt-32">
            <Navigation />
            <Header />
          </div>
          <slot />
        </div>
      </div>
    </div>
    <ThemeToggle />
  </body>
</html>

<script is:inline>
  const setTheme = () => {
    let theme;

    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      theme = localStorage.getItem("theme");
    } else {
      // Always default to dark theme
      theme = "dark";
    }

    document.documentElement.classList.remove("dark", "light");
    document.documentElement.classList.add(theme);

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  setTheme();
  document.addEventListener("astro:after-swap", setTheme);
</script>
