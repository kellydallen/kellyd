---
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";
import ThemeToggle from "../components/ThemeToggle.astro";
import { cn } from "../lib/utils";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  className?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  image = "/static/blog-placeholder.png",
  className,
} = Astro.props;

function getRandomSize(min: number, max: number) {
  return Math.floor(Math.random() * (max - min) + min) + "px";
}

function getRandomPosition(offset: number) {
  const top = Math.floor(Math.random() * offset) - offset / 2 + "%";
  const right = Math.floor(Math.random() * offset) - offset / 2 + "%";
  return { top, right };
}

// Yellow circle
const yellowCircle = {
  ...getRandomPosition(15),
  size: getRandomSize(400, 600),
};

// Gray circle - slightly offset from yellow circle
const grayCircle = {
  top: `calc(${yellowCircle.top} + ${Math.floor(Math.random() * 100)}px)`,
  right: `calc(${yellowCircle.right} + ${Math.floor(Math.random() * 100)}px)`,
  size: getRandomSize(200, 400),
};
---

<html lang="en">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Font preloads -->
    <link
      rel="preload"
      href="/fonts/Milligram-Bold-trial.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/ClashGrotesk-Variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <ViewTransitions />
  </head>
  <body
    class="relative overflow-x-hidden pb-24 pl-10 pr-10 font-sans text-zinc-900 transition-colors dark:bg-zinc-900 dark:text-zinc-200 xl:pl-24 xl:pr-24"
  >
    <!-- Yellow circle -->
    <div
      class="absolute -z-10 hidden overflow-hidden rounded-full md:block"
      style={`background: #FEC33A; width: ${yellowCircle.size}; height: ${yellowCircle.size}; top: ${yellowCircle.top}; right: ${yellowCircle.right};`}
      transition:name="yellow-circle"
    >
    </div>
    <!-- Gray circle -->
    <div
      class="absolute -z-10 hidden overflow-hidden rounded-full md:block"
      style={`background: #D1D5DB; width: ${grayCircle.size}; height: ${grayCircle.size}; top: ${grayCircle.top}; right: ${grayCircle.right};`}
      transition:name="gray-circle"
    >
    </div>
    <ThemeToggle />
    <div class={cn("max-w-4xl mx-auto p-4", className)}>
      <Header />
      <slot />
    </div>
  </body>
</html>

<script is:inline>
  const setTheme = () => {
    let theme;

    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      theme = localStorage.getItem("theme");
    } else {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    document.documentElement.classList[theme ? "add" : "remove"](theme);

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  setTheme();

  document.addEventListener("astro:after-swap", setTheme);
</script>
